@page "/"
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime

<PageTitle>Ants</PageTitle>

<h1>Ants</h1>


<FluentStack Orientation="Orientation.Horizontal" HorizontalGap="2">
    <FluentButton Appearance="Appearance.Accent" @onclick="DrawGrid">Play</FluentButton>
    <FluentButton Appearance="Appearance.Accent" @onclick="NullFunction">Pause</FluentButton>
    <FluentDivider Orientation="Orientation.Vertical" Role="DividerRole.Presentation" Style=" width: 0.5%;"></FluentDivider>
    <FluentButton Appearance="Appearance.Accent" @onclick="ToggleClickEvent">Edit Ant</FluentButton>
    <FluentButton Appearance="Appearance.Accent" @onclick="ToggleClickEvent">Edit Cell Color</FluentButton>
    <FluentButton Appearance="Appearance.Accent" @onclick="NullFunction">Remove Ant</FluentButton>
    <FluentDivider Orientation="Orientation.Vertical" Role="DividerRole.Presentation" Style=" width: 0.5%;"></FluentDivider>
    <FluentTextField Placeholder="Placeholder"></FluentTextField>
    <FluentButton Appearance="Appearance.Accent" @onclick="NullFunction">Update Movement</FluentButton>
    <FluentDivider Orientation="Orientation.Vertical" Role="DividerRole.Presentation" Style=" width: 0.5%;"></FluentDivider>
    <FluentLabel Typo="Typography.H3">Iterations: @statusMessage</FluentLabel>
</FluentStack>

<p></p>
<script src="mainPage.js"></script>


<canvas width="2000" height="750" @ref="canvasElement"></canvas>

@code {
    private ElementReference canvasElement;
    private bool isClickEventEnabled = false;
    private string statusMessage = "Status: Ready";

    private async void NullFunction(){}

    private async void DrawGrid()
    {
        int rows = 200; 
        int cols = 75; 
        int cellSize = 10;
        await JSRuntime.InvokeVoidAsync("mainPage.drawGrid", canvasElement, rows, cols, cellSize);
        await JSRuntime.InvokeVoidAsync("mainPage.addClickEventListener", canvasElement, cellSize);
    }

    private async void ToggleClickEvent()
    {
        int cellSize = 10;
        if (isClickEventEnabled)
        {
            await JSRuntime.InvokeVoidAsync("mainPage.removeClickEventListener", canvasElement);
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("mainPage.addClickEventListener", canvasElement, cellSize);
        }
        isClickEventEnabled = !isClickEventEnabled;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("mainPage.initializeCanvas", canvasElement);
        }
    }

    private void UpdateStatusMessage()
    {
        statusMessage = $"Status: Click";
    }
}

@page "/"
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime

<PageTitle>Ants</PageTitle>

<h1>Ants</h1>

<FluentStack Orientation="Orientation.Horizontal" HorizontalGap="2">
    <FluentButton Appearance="Appearance.Accent" @onclick="Play">Play</FluentButton>
    <FluentButton Appearance="Appearance.Accent" @onclick="Pause">Pause</FluentButton>
    <FluentDivider Orientation="Orientation.Vertical" Role="DividerRole.Presentation" Style=" width: 0.5%;"></FluentDivider>
    <FluentButton Appearance="Appearance.Accent" @onclick="Draw">Add Ant</FluentButton>
    <FluentButton Appearance="Appearance.Accent" @onclick="Draw">Remove Ant</FluentButton>
    <FluentDivider Orientation="Orientation.Vertical" Role="DividerRole.Presentation" Style=" width: 0.5%;"></FluentDivider>
    <FluentButton Appearance="Appearance.Accent" @onclick="Draw">Save</FluentButton>
    <FluentButton Appearance="Appearance.Accent" @onclick="Draw">Load</FluentButton>
    <FluentDivider Orientation="Orientation.Vertical" Role="DividerRole.Presentation" Style=" width: 0.5%;"></FluentDivider>
    <FluentTextField Placeholder="Placeholder"></FluentTextField>
    <FluentButton Appearance="Appearance.Accent" @onclick="Draw">Update Movement</FluentButton>
</FluentStack>

<p></p>

<canvas width="1000" height="1000" @ref="canvasElement"></canvas>

@code {
    private List<Ant> lstAnts = new List<Ant>();
    private bool IsPlaying = false;
    private Random random = new Random();

    protected override void OnInitialized()
    {
        // Initialize ants
        for (int i = 0; i < 10; i++)
        {
            lstAnts.Add(new Ant { X = 400, Y = 300 });
        }
    }

    private void Play()
    {
        IsPlaying = true;
    }

    private void Pause()
    {
        IsPlaying = false;
    }

    private void UpdateAnts(object state)
    {
        if (IsPlaying)
        {
            foreach (var ant in lstAnts)
            {
                // Move ant in a random direction
                ant.X += random.Next(-1, 2); // Move left, stay, or move right
                ant.Y += random.Next(-1, 2); // Move up, stay, or move down
            }
            StateHasChanged(); // Trigger UI update
        }
    }

    // Define the Ant class within the same file
    public class Ant
    {
        public double X { get; set; }
        public double Y { get; set; }
    }
}

<script>
    ﻿window.exampleNamespace = {
    function initializeCanvas(canvas) {
        const ctx = canvas.getContext('2d');
        ctx.fillStyle = 'green';
        ctx.fillRect(0, 0, canvas.width, canvas.height);
    },
    function drawCanvas(canvas, x, y, length, angle) {
        const ctx = canvas.getContext('2d');
        const ctx = canvas.getContext('2d');
            ctx.clearRect(0, 0, canvas.width, canvas.height); // Clear the canvas

			ctx.beginPath();
            ctx.moveTo(x, y);
            ctx.lineTo(x + length * Math.cos(angle), y + length * Math.sin(angle));
            ctx.stroke();
    }
};
</script>

@code {
    private ElementReference canvasElement;

    private async void Draw()
    {
        await JSRuntime.InvokeVoidAsync("exampleNamespace.drawCanvas", canvasElement);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("exampleNamespace.initializeCanvas", canvasElement);
        }
    }
}
